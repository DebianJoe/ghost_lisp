;; This document to discuss particulars of the language ;;
;;        ___
;;      _/ ^^\
;;     ( \  @/__
;;      \    \__)==|-------- ghostlisp
;;      /     \
;;     /      _\
;;     `"""""``

Symbolic Builtins:
	
	;; VARIABLE FUNCTIONS
	\    = lambda
	def	 = define
	=    = builtin put
	
	;; LIST FUNCTIONS
	list = make list
	cons = construct list
	head = retrieve first item of list
	car  = same as head, traditional
	tail = retrieve all but first item from list
	cdr  = same as tail, traditional
	eval = evaluate expression
	join = join two or more lists together
	
	;; MATHMATICAL FUNCTIONS
	+    = add
	-    = subtract
	*    = multiply
	/    = divide
	%    = modulus
	
	;; COMPARISON FUNCTIONS
	if   = if compare
	==   = equality check
	!=   = inequality check
	>    = greater than
	<    = less than
	>=   = greater than or equal
	<=   = less than or equal
	
	;; STRING FUNCTIONS
	load  = load lisp script (load "/full/path/to/file")
	error = define new error
	print = print output to user
	
	;; SYSTEM FUNCTIONS
	spawn = execvp a child process (spawn "/bin/sh")
	exit  = cleanly exit program   (exit (foobar))

Notes on using Quoted Expressions (Qexpr)
      Quoted expressions are enclosed with {squiggly-braces} and are
      used to signify lists 
      > {items in a list}
      > {1 2 3 4 5}

      They are also used for delimiting variables and sections of
      functions.  The best examples of usage are in the stdlib.glsp
      file.

      > (def {define} (\ f l) {eval (join (list f) l)})
      > (def {nil} {})
      > (def {true} 1)

      Ghostlisp by its simplistic nature attempts to evaluate normally
      enclosed (parentheticals) earlier in the process.  So, rather than
      passing the enclosed function or list, it will simply evaluate it 
      as a symbolic expression and then complain that you passed a result:

      Error:  Function 'foobar' passed incorrect type for argument 1. 
      Got S-Expression, Expected Q-Expression.

Example of Scheme-styled Ghostlisp
      Sometime, the easiest way to understand something is by example.
      The below is a ghostlisp version of ex. 1.1.7 from SICP.
      "Square Roots by Newton's Method."
=====
  (def {define} (\ { f b} {
    def (car f) (\ (cdr f) b)
    }))
  (define {abs x} {
    if (< x 0) {* -1 x} {x}})
    ;; the above functions are included in stdlib.glsp ;;
  (define {average a b} {/ (+ a b) 2})
  (define {improve guess n} {average guess (/ n guess)})
  (define {square n} {* n n})
  (define {sum-of-squares a b} {+ (* a a) (* b b)})
  (define {good-enough guess n}
    {< (abs (- (square guess) n)) 0.000001})
  (define {square-root-iter guess n}
    {if (good-enough guess x)
    {guess}
    {square-root-iter (improve guess x) x}})
  (define {sqrt x} {square-root-iter 1.0 x})
=====